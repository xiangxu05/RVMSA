# -*- coding: utf-8 -*-
import csv
import os
# Form implementation generated from reading ui file 'widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import JY901S
import time
import platform
import numpy as np
from scipy.interpolate import CubicSpline
from PyQt5.QtChart import QChartView
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QRectF
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QMainWindow, QGraphicsScene, QMessageBox, QComboBox, QFileDialog, \
    QGraphicsTextItem
from PyQt5.QtMultimedia import QCamera
from PyQt5.QtMultimediaWidgets import QCameraViewfinder
from PyQt5.QtWidgets import QWidget
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QGraphicsView, QGraphicsScene, QGraphicsPixmapItem
from PyQt5.QtChart import QChart, QChartView, QLineSeries, QValueAxis
from PyQt5.QtCore import QPointF
from PyQt5.QtGui import QPainter, QIcon, QImage, QPainter, QPixmap, QBrush, QFont, QColor
import chs.lib.device_model as deviceModel
from chs.lib.data_processor.roles.jy901s_dataProcessor import JY901SDataProcessor
from chs.lib.protocol_resolver.roles.wit_protocol_resolver import WitProtocolResolver
import serial.tools.list_ports
from PyQt5.QtCore import QThread, pyqtSignal
from Multi_modal_functionality import DataStorageThread
from yoloClass import CustomYOLO as myYolo

class Ui_Widget(object):

    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.setWindowModality(QtCore.Qt.ApplicationModal)
        Widget.resize(1102, 711)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Widget.sizePolicy().hasHeightForWidth())
        Widget.setSizePolicy(sizePolicy)
        Widget.setMinimumSize(QtCore.QSize(80, 20))
        Widget.setMouseTracking(True)
        Widget.setTabletTracking(True)
        Widget.setAcceptDrops(False)
        Widget.setLayoutDirection(QtCore.Qt.LeftToRight)
        Widget.setAutoFillBackground(True)
        Widget.setStyleSheet("")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(Widget)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.groupBox = QtWidgets.QGroupBox(Widget)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.serialPort = QtWidgets.QComboBox(self.groupBox)
        self.serialPort.setObjectName("serialPort")
        self.horizontalLayout.addWidget(self.serialPort)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 2)
        self.horizontalLayout.setStretch(2, 1)
        self.horizontalLayout.setStretch(3, 3)
        self.horizontalLayout.setStretch(4, 1)
        self.verticalLayout.addLayout(self.horizontalLayout)
        spacerItem4 = QtWidgets.QSpacerItem(20, 8, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem4)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        self.baudRate = QtWidgets.QComboBox(self.groupBox)
        self.baudRate.setObjectName("baudRate")
        self.baudRate.addItem("")
        self.baudRate.addItem("")
        self.horizontalLayout_2.addWidget(self.baudRate)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 2)
        self.horizontalLayout_2.setStretch(2, 1)
        self.horizontalLayout_2.setStretch(3, 3)
        self.horizontalLayout_2.setStretch(4, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem8 = QtWidgets.QSpacerItem(20, 8, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem8)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem9 = QtWidgets.QSpacerItem(28, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem9)
        self.connectButton = QtWidgets.QPushButton(self.groupBox)
        self.connectButton.setObjectName("connectButton")
        self.horizontalLayout_3.addWidget(self.connectButton)
        spacerItem10 = QtWidgets.QSpacerItem(28, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem10)
        self.serialStatu = QtWidgets.QLabel(self.groupBox)
        self.serialStatu.setMinimumSize(QtCore.QSize(25, 25))
        self.serialStatu.setMaximumSize(QtCore.QSize(25, 25))
        self.serialStatu.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"border-radius:12px;")
        self.serialStatu.setText("")
        self.serialStatu.setObjectName("serialStatu")
        self.horizontalLayout_3.addWidget(self.serialStatu)
        spacerItem11 = QtWidgets.QSpacerItem(28, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem11)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(1, 3)
        self.horizontalLayout_3.setStretch(2, 1)
        self.horizontalLayout_3.setStretch(3, 1)
        self.horizontalLayout_3.setStretch(4, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem12)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 4)
        self.verticalLayout.setStretch(2, 1)
        self.verticalLayout.setStretch(3, 4)
        self.verticalLayout.setStretch(4, 1)
        self.verticalLayout.setStretch(5, 4)
        self.verticalLayout.setStretch(6, 1)
        self.verticalLayout_9.addWidget(self.groupBox)
        self.groupBox_3 = QtWidgets.QGroupBox(Widget)
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem13)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem14)
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem15)
        self.filePath = QtWidgets.QLineEdit(self.groupBox_3)
        self.filePath.setMinimumSize(QtCore.QSize(100, 0))
        self.filePath.setObjectName("filePath")
        self.horizontalLayout_4.addWidget(self.filePath)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem16)
        self.browseButton = QtWidgets.QPushButton(self.groupBox_3)
        self.browseButton.setObjectName("browseButton")
        self.horizontalLayout_4.addWidget(self.browseButton)
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem17)
        self.horizontalLayout_4.setStretch(0, 1)
        self.horizontalLayout_4.setStretch(1, 2)
        self.horizontalLayout_4.setStretch(2, 1)
        self.horizontalLayout_4.setStretch(3, 8)
        self.horizontalLayout_4.setStretch(4, 1)
        self.horizontalLayout_4.setStretch(5, 2)
        self.horizontalLayout_4.setStretch(6, 1)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        spacerItem18 = QtWidgets.QSpacerItem(20, 11, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem18)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem19)
        self.startButton = QtWidgets.QPushButton(self.groupBox_3)
        self.startButton.setObjectName("startButton")
        self.horizontalLayout_5.addWidget(self.startButton)
        spacerItem20 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem20)
        self.stopButton = QtWidgets.QPushButton(self.groupBox_3)
        self.stopButton.setObjectName("stopButton")
        self.horizontalLayout_5.addWidget(self.stopButton)
        spacerItem21 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem21)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 3)
        self.horizontalLayout_5.setStretch(2, 1)
        self.horizontalLayout_5.setStretch(3, 3)
        self.horizontalLayout_5.setStretch(4, 1)
        self.verticalLayout_4.addLayout(self.horizontalLayout_5)
        spacerItem22 = QtWidgets.QSpacerItem(20, 11, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem22)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem23 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem23)
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_6.addWidget(self.label_5)
        spacerItem24 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem24)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.label_6)
        self.gpsStatu = QtWidgets.QLabel(self.groupBox_3)
        self.gpsStatu.setMinimumSize(QtCore.QSize(25, 25))
        self.gpsStatu.setMaximumSize(QtCore.QSize(25, 25))
        self.gpsStatu.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"border-radius:12px;")
        self.gpsStatu.setText("")
        self.gpsStatu.setObjectName("gpsStatu")
        self.verticalLayout_2.addWidget(self.gpsStatu)
        self.horizontalLayout_6.addLayout(self.verticalLayout_2)
        spacerItem25 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem25)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_10 = QtWidgets.QLabel(self.groupBox_3)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_3.addWidget(self.label_10)
        self.rtkStatu = QtWidgets.QLabel(self.groupBox_3)
        self.rtkStatu.setMinimumSize(QtCore.QSize(25, 25))
        self.rtkStatu.setMaximumSize(QtCore.QSize(25, 25))
        self.rtkStatu.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"border-radius:12px;")
        self.rtkStatu.setText("")
        self.rtkStatu.setObjectName("rtkStatu")
        self.verticalLayout_3.addWidget(self.rtkStatu)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem26)
        self.horizontalLayout_6.setStretch(0, 1)
        self.horizontalLayout_6.setStretch(1, 2)
        self.horizontalLayout_6.setStretch(2, 1)
        self.horizontalLayout_6.setStretch(3, 1)
        self.horizontalLayout_6.setStretch(4, 1)
        self.horizontalLayout_6.setStretch(5, 1)
        self.horizontalLayout_6.setStretch(6, 1)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        spacerItem27 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem27)
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_3)
        self.groupBox_7.setObjectName("groupBox_7")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.groupBox_7)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.longitudeLabel = QtWidgets.QLabel(self.groupBox_4)
        self.longitudeLabel.setObjectName("longitudeLabel")
        self.horizontalLayout_7.addWidget(self.longitudeLabel)
        self.label_16 = QtWidgets.QLabel(self.groupBox_4)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_7.addWidget(self.label_16)
        self.horizontalLayout_12.addWidget(self.groupBox_4)
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_5.setObjectName("groupBox_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.groupBox_5)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.longitudeLabel_2 = QtWidgets.QLabel(self.groupBox_5)
        self.longitudeLabel_2.setObjectName("longitudeLabel_2")
        self.horizontalLayout_8.addWidget(self.longitudeLabel_2)
        self.label_19 = QtWidgets.QLabel(self.groupBox_5)
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_8.addWidget(self.label_19)
        self.horizontalLayout_12.addWidget(self.groupBox_5)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_7)
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.groupBox_6)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.heightLabel = QtWidgets.QLabel(self.groupBox_6)
        self.heightLabel.setObjectName("heightLabel")
        self.horizontalLayout_11.addWidget(self.heightLabel)
        self.label_25 = QtWidgets.QLabel(self.groupBox_6)
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_11.addWidget(self.label_25)
        self.horizontalLayout_12.addWidget(self.groupBox_6)
        self.horizontalLayout_12.setStretch(0, 1)
        self.horizontalLayout_12.setStretch(1, 1)
        self.horizontalLayout_12.setStretch(2, 1)
        self.horizontalLayout_13.addLayout(self.horizontalLayout_12)
        self.verticalLayout_4.addWidget(self.groupBox_7)
        spacerItem28 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem28)
        self.verticalLayout_4.setStretch(0, 1)
        self.verticalLayout_4.setStretch(1, 4)
        self.verticalLayout_4.setStretch(2, 1)
        self.verticalLayout_4.setStretch(3, 4)
        self.verticalLayout_4.setStretch(4, 1)
        self.verticalLayout_4.setStretch(5, 6)
        self.verticalLayout_4.setStretch(6, 1)
        self.verticalLayout_4.setStretch(7, 6)
        self.verticalLayout_4.setStretch(8, 1)
        self.verticalLayout_9.addWidget(self.groupBox_3)
        self.verticalLayout_9.setStretch(0, 1)
        self.verticalLayout_9.setStretch(1, 2)
        self.horizontalLayout_16.addLayout(self.verticalLayout_9)
        self.groupBox_2 = QtWidgets.QGroupBox(Widget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_13 = QtWidgets.QLabel(self.groupBox_2)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_5.addWidget(self.label_13)
        self.rmvsaView = QChartView(self.groupBox_2)
        self.rmvsaView.setMinimumSize(QtCore.QSize(0, 0))
        self.rmvsaView.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.rmvsaView.setAutoFillBackground(True)
        self.rmvsaView.setObjectName("rmvsaView")
        self.verticalLayout_5.addWidget(self.rmvsaView)
        self.verticalLayout_5.setStretch(0, 1)
        self.verticalLayout_5.setStretch(1, 10)
        self.horizontalLayout_14.addLayout(self.verticalLayout_5)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_15 = QtWidgets.QLabel(self.groupBox_2)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_6.addWidget(self.label_15)
        self.cemeraView = QChartView(self.groupBox_2)
        self.cemeraView.setMinimumSize(QtCore.QSize(0, 0))
        self.cemeraView.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.cemeraView.setAutoFillBackground(True)
        self.cemeraView.setObjectName("cemeraView")
        self.verticalLayout_6.addWidget(self.cemeraView)
        self.verticalLayout_6.setStretch(0, 1)
        self.verticalLayout_6.setStretch(1, 10)
        self.horizontalLayout_14.addLayout(self.verticalLayout_6)
        self.verticalLayout_10.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_14 = QtWidgets.QLabel(self.groupBox_2)
        self.label_14.setObjectName("label_14")
        self.verticalLayout_7.addWidget(self.label_14)
        self.modelView = QChartView(self.groupBox_2)
        self.modelView.setMinimumSize(QtCore.QSize(0, 0))
        self.modelView.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.modelView.setAutoFillBackground(True)
        self.modelView.setObjectName("modelView")
        self.verticalLayout_7.addWidget(self.modelView)
        self.verticalLayout_7.setStretch(0, 1)
        self.verticalLayout_7.setStretch(1, 10)
        self.horizontalLayout_15.addLayout(self.verticalLayout_7)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_26 = QtWidgets.QLabel(self.groupBox_2)
        self.label_26.setObjectName("label_26")
        self.verticalLayout_8.addWidget(self.label_26)
        self.mapView = QChartView(self.groupBox_2)
        self.mapView.setMinimumSize(QtCore.QSize(0, 0))
        self.mapView.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.mapView.setAutoFillBackground(True)
        self.mapView.setObjectName("mapView")
        self.verticalLayout_8.addWidget(self.mapView)
        self.verticalLayout_8.setStretch(0, 1)
        self.verticalLayout_8.setStretch(1, 10)
        self.horizontalLayout_15.addLayout(self.verticalLayout_8)
        self.verticalLayout_10.addLayout(self.horizontalLayout_15)
        self.verticalLayout_10.setStretch(0, 1)
        self.verticalLayout_10.setStretch(1, 1)
        self.horizontalLayout_16.addWidget(self.groupBox_2)
        self.horizontalLayout_16.setStretch(0, 1)
        self.horizontalLayout_16.setStretch(1, 5)

        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)

        self.startButton.clicked.connect(lambda: self.start_button_clicked(Widget))
        self.stopButton.clicked.connect(lambda: self.stop_button_clicked(Widget))
        self.connectButton.clicked.connect(lambda: self.connect_button_clicked(Widget))
        self.browseButton.clicked.connect(lambda:self.browse_button_clicked(Widget))

        # 查询可用的串口
        ports = serial.tools.list_ports.comports()
        port_list = [port.device for port in ports]
        # 添加新的串口号到 QComboBox
        self.serialPort.clear()
        self.serialPort.addItems(port_list)

        # 定时器
        self.timer = QTimer()
        self.timer.setInterval(100)  # 每 0.2 秒更新一次
        self.timer.timeout.connect(lambda: self.handel_timer(Widget))
        self.model_timer = QTimer()
        self.model_timer.setInterval(100)
        self.model_timer.timeout.connect(lambda: self.handel_model_timer(Widget))

        # 存储了时间与坐标点数据
        self.start_time = time.time()
        self.x_data = []
        self.y_data = []
        self.x_data2 = []
        self.y_data2 = []

        # 定义设备模型
        device = JY901S.deviceModel.DeviceModel(
            "我的JY901",
            WitProtocolResolver(),
            JY901SDataProcessor(),
            "51_0"
        )
        self.device_model = device

        # 初始化折线图
        chart = QChart()
        series = QLineSeries()
        chart.addSeries(series)
        # 创建 X 轴和 Y 轴，并设置它们的范围
        x_axis = QValueAxis()
        x_axis.setRange(0, 10)  # 设置 X 轴的范围为 0 到 10
        x_axis.setTitleText("时间 s")  # X 轴标题
        y_axis = QValueAxis()
        y_axis.setRange(0, 1)  # 设置 Y 轴的范围为 -2 到 2
        y_axis.setTitleText("RMVSA m/s^2")  # Y 轴标题
        # 将 X 和 Y 轴添加到图表中
        chart.setAxisX(x_axis, series)
        chart.setAxisY(y_axis, series)
        # 设置图表的标题
        chart.setTitle("平整度曲线")
        # 将 QChart 设置到 QChartView 中
        self.rmvsaView.setChart(chart)
        # 设置抗锯齿渲染，使线条更加平滑
        self.rmvsaView.setRenderHint(QPainter.Antialiasing)

        chart2 = QChart()
        series2 = QLineSeries()
        chart2.addSeries(series2)
        # 创建 X 轴和 Y 轴，并设置它们的范围
        x_axis2 = QValueAxis()
        x_axis2.setRange(0, 10)  # 设置 X 轴的范围为 0 到 10
        x_axis2.setTitleText("时间 s")  # X 轴标题
        y_axis2 = QValueAxis()
        y_axis2.setRange(0, 1)  # 设置 Y 轴的范围为 -2 到 2
        y_axis2.setTitleText("RMVSA m/s^2")  # Y 轴标题
        # 将 X 和 Y 轴添加到图表中
        chart2.setAxisX(x_axis2, series2)
        chart2.setAxisY(y_axis2, series2)
        # 设置图表的标题
        chart2.setTitle("修正结果")
        self.mapView.setChart(chart2)
        self.mapView.setRenderHint(QPainter.Antialiasing)

        self.GreenStyleSheet = """
            background-color: qradialgradient(
            spread:pad, 
            cx:0.5, 
            cy:0.5, 
            radius:0.5, 
            fx:0.5, 
            fy:0.5, 
            stop:0 rgba(0, 255, 0, 255),  /* 绿色 */
            stop:1 rgba(255, 255, 255, 255)  /* 渐变到白色 */
            );
            border-radius: 12px;
        """
        self.RedStyleSheet = """
                background-color: qradialgradient(
                spread:pad, 
                cx:0.5, 
                cy:0.5, 
                radius:0.5, 
                fx:0.5, 
                fy:0.5, 
                stop:0 rgba(255, 0, 0, 255),  /* 绿色 */
                stop:1 rgba(255, 255, 255, 255)  /* 渐变到白色 */
                );
                border-radius: 12px;
            """
        Widget.setWindowIcon(QIcon("./1.ico"))

        model_path = '/best-cls.pt'
        self.myYolo = myYolo(model_path=model_path, input_size=(224, 224))
        self.reader = None
        self.all_rows = []  # 存储 CSV 文件的所有行
        self.current_row_index = 0  # 当前处理的行索引


    def browse_button_clicked(self,Widget):
        try:
            file_path, _ = QFileDialog.getSaveFileName(Widget, "选择保存位置", "", "Data Files (*.csv);;All Files (*);;Text Files (*.txt)")
            if file_path:
                self.filePath.setText(file_path)
        except Exception as e:
            print(f"发生错误: {e}")
    def start_button_clicked(self, Widget):
        if(self.startButton.text() == "开始检测"):
            '''
            :以下代码首先启动摄像头，然后启动定时器
            '''
            # 创建 QGraphicsScene
            self.scene = QGraphicsScene(Widget)  # 将 Widget 作为父对象

            # 设置场景
            self.cemeraView.setScene(self.scene)

            # 创建摄像头
            self.camera = QCamera()

            # 创建摄像头查看器
            self.viewfinder = QCameraViewfinder()
            self.viewfinder.setMinimumSize(400, 350)

            # 将查看器添加到
            self.scene.addWidget(self.viewfinder)

            # 设置摄像头查看器为 camera
            self.camera.setViewfinder(self.viewfinder)
            self.camera.start()  # 启动摄像头

            # 启动定时器
            self.timer.start()
            self.startButton.setText("停止检测")
            self.thread = DataStorageThread(self.filePath.text())  # 初始化线程
            self.thread.start()  # 启动线程
        elif(self.startButton.text() == "停止检测"):
            '''
                    :以下代码首先关闭定时器，关闭摄像头
                    '''
            # 关闭定时器
            self.timer.stop()

            # 检查摄像头是否已经启动
            if hasattr(self, 'camera') and self.camera is not None:
                self.camera.stop()  # 停止摄像头
                self.camera.deleteLater()  # 释放摄像头资源

                # 移除查看器
                if hasattr(self, 'viewfinder') and self.viewfinder is not None:
                    self.viewfinder.deleteLater()  # 删除查看器

                # 清空场景
                if hasattr(self, 'scene') and self.scene is not None:
                    self.scene.clear()  # 清除场景中的所有项目

            chart = self.rmvsaView.chart()
            series = chart.series()[0]
            series.clear()
            x_axis = chart.axisX()
            y_axis = chart.axisY()
            x_axis.setRange(0, 10)
            y_axis.setRange(0, 1)
            self.rmvsaView.repaint()
            self.longitudeLabel.setText("0")
            self.longitudeLabel_2.setText("0")
            self.heightLabel.setText("0")
            self.startButton.setText("开始检测")


    def stop_button_clicked(self, Widget):
        if(self.stopButton.text() == "模型检测"):
            # 关闭定时器
            if(self.filePath.text() == ""):
                QMessageBox.warning(None, "警告", "未选择文件路径")
                return
            QMessageBox.warning(None, "提示", "开始多模态分析")
            self.current_row_index = 0
            self.stopButton.setText("停止检测")
            #获取文件路径
            file_path = self.filePath.text()
            try:
                # 打开并读取 CSV 文件
                with open(file_path, newline='') as csvfile:
                    self.reader = csv.reader(csvfile)
                    self.all_rows = list(self.reader)
            except Exception as e:
                print(f"读取文件失败: {e}")

            self.model_timer.start()
        else:
            self.stopButton.setText("模型检测")
            self.x_data2.clear()
            self.y_data2.clear()
            chart = self.mapView.chart()
            series = chart.series()[0]
            series.clear()
            x_axis = chart.axisX()
            y_axis = chart.axisY()
            x_axis.setRange(0, 10)
            y_axis.setRange(0, 1)
            self.mapView.repaint()
            self.model_timer.stop()
    def handel_model_timer(self, Widget):
        try:
            if self.current_row_index < len(self.all_rows):
                # 获取当前行数据
                current_row = self.all_rows[self.current_row_index]
                predicted_label, predicted_prob = self.myYolo.predict(current_row[4])

                # 处理当前行数据，可以在这里加入自定义的处理逻辑
                scene = QGraphicsScene()
                pixmap = QPixmap('./'+current_row[4])
                pixmap_item = QGraphicsPixmapItem(pixmap)
                scene.addItem(pixmap_item)
                text_item = QGraphicsTextItem(f"{predicted_label}")
                text_item.setFont(QFont('Arial', 20))
                text_item.setDefaultTextColor(QColor(255, 0, 0))
                text_item.setPos(100, 20)
                scene.addItem(text_item)
                current_transform = self.modelView.transform()
                self.modelView.setScene(scene)
                self.modelView.setRenderHint(QPainter.Antialiasing)

                if float(current_row[1]) > 2 or float(current_row[1]) < -2 and current_row[4] =="pingdi":
                    new_rvmsa = (float(self.all_rows[self.current_row_index-1][1])+float(self.all_rows[self.current_row_index+1][1]))/2
                else:
                    new_rvmsa = current_row[1]
                current_row.append(predicted_label)
                current_row.append(predicted_prob)
                current_row.append(new_rvmsa)
                self.all_rows[self.current_row_index] = current_row
                # print(self.all_rows[self.current_row_index])
                # 更新当前行索引
                self.current_row_index += 1

                self.x_data2.append(int(self.current_row_index))
                self.y_data2.append(float(current_row[7]))

                # 保持数据长度不超过100个数据点
                if len(self.x_data2) > 100:
                    self.x_data2.pop(0)
                    self.y_data2.pop(0)

                # 确保有足够的数据点进行样条插值
                if len(self.x_data2) > 2 and len(self.y_data2) > 2:
                    # 获取当前的 QChart 对象
                    chart = self.mapView.chart()
                    # 获取图表中的第一个系列（QLineSeries）
                    if chart.series():
                        series = chart.series()[0]  # 假设只有一个系列
                        # 使用样条插值使曲线更加平滑
                        x_smooth = np.linspace(min(self.x_data2), max(self.x_data2), 500)  # 创建更多的 x 点
                        spline = CubicSpline(self.x_data2, self.y_data2)  # 样条插值
                        y_smooth = spline(x_smooth)  # 获取平滑的 y 值
                        # 清空现有数据
                        series.clear()
                        # 添加平滑后的数据点到 QLineSeries
                        for x, y in zip(x_smooth, y_smooth):
                            series.append(x, y)
                        # 更新坐标轴范围
                        x_axis = chart.axisX()
                        y_axis = chart.axisY()
                        x_axis.setRange(self.x_data2[0], self.x_data2[-1])
                        y_min = min(self.y_data2)
                        y_max = max(self.y_data2)
                        y_axis.setRange(y_min - 1, y_max + 1)
                        # # 重新绘制图表
                        # self.rmsvaView.repaint()
                else:
                    print("数据不足以进行插值")

            else:
                file_path = self.filePath.text()
                base_name, ext = os.path.splitext(file_path)
                new_file_name = base_name + "_model" + ext
                with open(new_file_name, mode='w', newline='') as csvfile:
                    writer = csv.writer(csvfile)
                    for row in self.all_rows:
                        writer.writerow(row)
                self.model_timer.stop()
        except Exception as e:
            self.model_timer.stop()
            print(f"error: {e}")

    def handel_timer(self, Widget):
        current_time = time.time() - self.start_time
        rmsva,lon,lat,Speed = JY901S.onUpdate(self.device_model)  # 调用 onUpdate 获取 RMSVA
        self.longitudeLabel.setText(str(lon))
        self.longitudeLabel_2.setText(str(lat))
        self.heightLabel.setText(str(Speed))
        # print(rmsva)
        if rmsva is not None:
            self.x_data.append(current_time)
            self.y_data.append(rmsva)

            # 保持数据长度不超过100个数据点
            if len(self.x_data) > 100:
                self.x_data.pop(0)
                self.y_data.pop(0)

            # 确保有足够的数据点进行样条插值
            if len(self.x_data) > 2 and len(self.y_data) > 2:
                # 获取当前的 QChart 对象
                chart = self.rmvsaView.chart()
                # 获取图表中的第一个系列（QLineSeries）
                if chart.series():
                    series = chart.series()[0]  # 假设只有一个系列
                    # 使用样条插值使曲线更加平滑
                    x_smooth = np.linspace(min(self.x_data), max(self.x_data), 500)  # 创建更多的 x 点
                    spline = CubicSpline(self.x_data, self.y_data)  # 样条插值
                    y_smooth = spline(x_smooth)  # 获取平滑的 y 值
                    # 清空现有数据
                    series.clear()
                    # 添加平滑后的数据点到 QLineSeries
                    for x, y in zip(x_smooth, y_smooth):
                        series.append(x, y)
                    # 更新坐标轴范围
                    x_axis = chart.axisX()
                    y_axis = chart.axisY()
                    x_axis.setRange(self.x_data[0], self.x_data[-1])
                    y_min = min(self.y_data)
                    y_max = max(self.y_data)
                    y_axis.setRange(y_min - 1, y_max + 1)
                    # # 重新绘制图表
                    # self.rmsvaView.repaint()
            else:
                print("数据不足以进行插值")
        else:
            print("RMSVA 为 None，未更新图表")
            QMessageBox.warning(None, "警告", "尚未连接设备！")
            self.timer.stop()
        try:
            if(self.filePath.text() != ""):
                # 创建 QImage 对象
                image = QImage(self.viewfinder.size(), QImage.Format_ARGB32)  # 使用 ARGB32 格式
                painter = QPainter(image)
                self.viewfinder.render(painter)
                painter.end()
                self.thread.receiveData.emit(rmsva, lon, lat, image)
        except Exception as e:
            print(f"Error in send_data: {e}")


    def connect_button_clicked(self,Widget):
        try:
            if self.connectButton.text() == "取消连接":
                self.device_model.closeDevice()
                if(self.startButton.text() == "停止检测"):
                    self.start_button_clicked(self)
                self.connectButton.setText("连接")
                self.serialStatu.setStyleSheet(self.RedStyleSheet)
                self.gpsStatu.setStyleSheet(self.RedStyleSheet)
                self.rtkStatu.setStyleSheet(self.RedStyleSheet)
                return
            # 检查系统平台，设置串口号
            if platform.system().lower() == 'linux':
                self.device_model.serialConfig.portName = "/dev/ttyUSB0"  # 设置串口   Set serial port
            else:
                self.device_model.serialConfig.portName = self.serialPort.currentText()  # 设置串口   Set serial port
            # 设置波特率
            self.device_model.serialConfig.baud = int(self.baudRate.currentText())  # 设置波特率  Set baud rate
            # 尝试打开串口
            self.device_model.openDevice()  # 打开串口   Open serial port
            # 读取配置信息
            JY901S.readConfig(self.device_model)  # 读取配置信息 Read configuration information

            self.serialStatu.setStyleSheet(self.GreenStyleSheet)
            self.gpsStatu.setStyleSheet(self.GreenStyleSheet)
            self.rtkStatu.setStyleSheet(self.GreenStyleSheet)
            self.connectButton.setText("取消连接")

        except Exception as e:
            # 弹出错误信息框，提示用户串口打开失败
            error_message = QMessageBox()
            error_message.setIcon(QMessageBox.Critical)
            error_message.setWindowTitle("错误")
            error_message.setText(f"无法打开串口: {str(e)}")
            error_message.setStandardButtons(QMessageBox.Ok)
            error_message.exec_()

    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "路面平整度采集可视化评价"))
        self.groupBox.setTitle(_translate("Widget", "串口设置"))
        self.label.setText(_translate("Widget", "串口号"))
        self.label_2.setText(_translate("Widget", "波特率"))
        self.baudRate.setItemText(0, _translate("Widget", "9600"))
        self.baudRate.setItemText(1, _translate("Widget", "115200"))
        self.connectButton.setText(_translate("Widget", "连接"))
        self.groupBox_3.setTitle(_translate("Widget", "实验数据"))
        self.label_4.setText(_translate("Widget", "文件路径"))
        self.browseButton.setText(_translate("Widget", "浏览"))
        self.startButton.setText(_translate("Widget", "开始检测"))
        self.stopButton.setText(_translate("Widget", "模型检测"))
        self.label_5.setText(_translate("Widget", "定位模式"))
        self.label_6.setText(_translate("Widget", "GPS"))
        self.label_10.setText(_translate("Widget", "RTK"))
        self.groupBox_7.setTitle(_translate("Widget", "位置信息"))
        self.groupBox_4.setTitle(_translate("Widget", "经度"))
        self.longitudeLabel.setText(_translate("Widget", "0"))
        self.label_16.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">°</span></p></body></html>"))
        self.groupBox_5.setTitle(_translate("Widget", "纬度"))
        self.longitudeLabel_2.setText(_translate("Widget", "0"))
        self.label_19.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">°</span></p></body></html>"))
        self.groupBox_6.setTitle(_translate("Widget", "高程"))
        self.heightLabel.setText(_translate("Widget", "0"))
        self.label_25.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">M</span></p></body></html>"))
        self.groupBox_2.setTitle(_translate("Widget", "数据可视化"))
        self.label_13.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">RMVSA数据</span></p></body></html>"))
        self.label_15.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">实时视频</span></p></body></html>"))
        self.label_14.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">模型数据</span></p></body></html>"))
        self.label_26.setText(_translate("Widget", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt;\">数据展示</span></p></body></html>"))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = QtWidgets.QFrame()
    ui = Ui_Widget()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec_())